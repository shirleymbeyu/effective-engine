# -*- coding: utf-8 -*-
"""Part1_credit_score.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LaPTko-kbkpo0obkZbMtxI28KC_o1-qx

Q: Create a credit scoring model that will be used to predict whether a customer will default or not.

# Setting up workspace
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
import seaborn as sns

df = pd.read_csv("https://bit.ly/37FPsAF")
df.head()

"""# Data exploration"""

df.shape

df.info()

"""From the above it is clear that, there are missing values in some of the columns."""

df.isna().sum()

"""To get a list of the uniques values in each column, we do as follows:"""

cols = df.columns.to_list()

for col in cols:
  print("COLUMN:", col)
  print("Number of unique variables:", df[col].nunique())
  print(df[col].unique())
  print()

"""# Data cleaning

**MISSING VALUES**

In the cleaning, I'll change data types, replace values in some rows and columns and deal with the missing values appropriately.
"""

missing = df[df.isna().any(axis=1)]
missing.shape

"""Removing any rows with missing values means removing 134 rows which is about 22% of the data set.Another approach would be better

**NUMERIC VARIABLES**
  
checking whether any row has the value 0 for LoanAmmount column:
"""

df[df['LoanAmount'] == '0']

#filling rows with nan values for loan_ammount with zero
df['LoanAmount'] = df['LoanAmount'].fillna(0)

#confirming that it worked
df['LoanAmount'].isna().sum()

#Checking whether any row has 0 for loan ammount term
df[df['Loan_Amount_Term'] == '0']

#fill missing values with 0
df['Loan_Amount_Term'] = df['Loan_Amount_Term'].fillna(0)

df['Loan_Amount_Term'].isna().sum()

#Changing data types:
df['CoapplicantIncome'] = df['CoapplicantIncome'].astype(int)
#df['Credit_History'] = df['Credit_History'].astype(int)
df['Loan_Amount_Term'] = df['Loan_Amount_Term'].astype(int)
df['LoanAmount'] = df['LoanAmount'].astype(int)

"""**NON_NUMERIC VARIABLES**

Fill missing values in credit history as 'nohistory' and for gender as 'nonbinary'
"""

df['Credit_History'] = df['Credit_History'].fillna('nohistory')
df['Gender'] = df['Gender'].fillna('nonbinary')

df.isna().sum()

df[df['Married'].isna()]

"""These too have missing values on the dependents column.It's fit to delete them"""

#df.drop(df[df['Married'].isna()], axis = 0)
df = df.dropna(thresh=11)

df.shape

"""Will fill the nan values in the self-employed column with something else. Here an assumption is that those values represent those without any employment."""

#observing rows with missing detail on self_emploment
df[df['Self_Employed'].isna()]

"""since most of these entries have high loan-ammount-terms and have incomes from all categories, it is safe to conclude that their form of income could be temporary:"""

df['Self_Employed'] = df['Self_Employed'].fillna('temporary')

df['Dependents'] = df['Dependents'].fillna('unclear')

#checking for duplication
df.duplicated().any()

"""**OUTLIERS**"""

plt.figure(figsize=(14, 8))
df.boxplot()
plt.show()

"""There seems to be no outliers in the loan ammount and loan ammount term. This could be because the term bracket is specified by the lending agency and that the ammount bracket too.

The outliers in the applicant and coapplicant income won't be removed as they may be authentic entries
"""

df.to_csv("credit_data.csv")
