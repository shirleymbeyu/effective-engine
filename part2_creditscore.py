# -*- coding: utf-8 -*-
"""part2_creditscore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ThaNr2IZUZ1lG3A6CSAhMXhP16qUYAJX
"""

import pandas as pd
import numpy as np
import seaborn as sns 
import matplotlib.pyplot as plt

df = pd.read_csv("credit_data (1).csv")
df

"""#UNIVARIATE ANALYSIS"""

# univariate analysis: sex variable
plt.figure(figsize = (5, 4))
df.Gender.value_counts().plot(kind = 'bar', rot = 0);

# univariate analysis: married variable
plt.figure(figsize = (5, 4))
df.Married.value_counts().plot(kind = 'bar', rot = 0);

# univariate analysis: dependents variable
plt.figure(figsize = (5, 4))
df.Dependents.value_counts().plot(kind = 'bar', rot = 0);

# univariate analysis: education variable
plt.figure(figsize = (5, 4))
df.Education.value_counts().plot(kind = 'bar', rot = 0);

# univariate analysis: self_employed variable
plt.figure(figsize = (5, 4))
df.Self_Employed.value_counts().plot(kind = 'bar', rot = 0);

# univariate analysis: credit_history variable
plt.figure(figsize = (5, 4))
df.Credit_History.value_counts().plot(kind = 'bar', rot = 0);

# univariate analysis: property_area variable
plt.figure(figsize = (5, 4))
df.Property_Area.value_counts().plot(kind = 'bar', rot = 0);

#description of the numerical variables
df.describe()

# univariate analysis: apllicant_income variable
sns.distplot(df.ApplicantIncome);

"""It is positvely skewed; people with high income take loans less frequently"""

# univariate analysis: age variable
sns.distplot(df.CoapplicantIncome);

"""positively skewed: most of the stated coappliants have low income"""

# univariate analysis: loan ammount variable
sns.distplot(df.LoanAmount);

"""positevly skewed: most of the loans are between the 0-200 mark, higher loan ammounts have low density"""

# univariate analysis: loan ammount variable
sns.distplot(df.Loan_Amount_Term);

"""negatively skewed: Most of the loans have a high ammount term; towards 400

# BIVARIATE ANALYSIS
"""

# heatmap to visualise features with linear relationships 
plt.figure(figsize = (4, 4))
sns.heatmap(df.corr(), annot=True, );

"""The relationship between applicant income and loan ammount is strong; +0.541852 

There's a weak positive correlation between loan ammount and loan ammount term; +0.055198

NB: All correlations with loan ammount terms are low.

There's negative weak correlation between coapplicant income and applicant income; -0.116266

NB: All correlations with coapplicant income are low.


"""

#relationship between gender and loan ammount
sns.barplot(x =df.Gender, y = df.LoanAmount)

"""There's no big diference between male and female gender groups in the collective ammount of loans. 

The nonbinary group have notably high loan ammounts and a wide range.

The female group have the lowest loan ammounts.

The male groups have a small range in loan ammounts.
"""

#married and loan ammount
sns.barplot(x = df.Married, y = df.LoanAmount)

"""Thos ewho are married have more loan ammounts compared to the unmarried."""

#dependents and loan ammount
sns.barplot(x = df.Dependents, y = df.LoanAmount)

"""Those with more dependents(3+), take loans of higher ammounts"""

#education and loan ammount
sns.barplot(x = df.Education, y = df.LoanAmount)

"""Graduates have higher loan ammounts """

#self employed and loan ammount
sns.barplot(x = df.Self_Employed, y = df.LoanAmount)

#loan ammount and credit history
sns.barplot(x = df.Credit_History, y = df.LoanAmount)

#property area and loan ammount
sns.barplot(x = df.Property_Area, y = df.LoanAmount)

"""##**TARGET VARIABLE**

Observing relationship between our target variable, default status, and other variables:
"""

# univariate analysis: default_status variable
plt.figure(figsize = (5, 4))
df.Default_Status.value_counts().plot(kind = 'bar', rot = 0);

"""Target variable and numeric varaibles from the data set: """

#Applicant income
sns.barplot(y= df.ApplicantIncome, x= df.Default_Status)

"""the mean applicant income for the yes and no default status are almost same. Conclusion from this could be:

The applicant income doesnt affect the default status as such and there's no bias.
"""

#Coapplicant income
sns.barplot(y = df.CoapplicantIncome, x = df.Default_Status)

"""most of the default status marked as NO, have coapplicant incomes with higher values than those marked as yes.
This variable plays a role in the default status.
"""

#Loan ammount
sns.barplot(x = df.Default_Status, y = df.LoanAmount)

"""Mean Loan ammount values for the default statuses are almost similar, hence showing that:
The loan ammount doesn't affect default status as much and there's no bias.
"""

#Loan ammount term
sns.barplot(x = df.Default_Status, y = df.Loan_Amount_Term)

"""The mean loan ammount terms for the default status are almost similar, showing that it doesn't affect the default status and ther's no bias to it.

### MULTIVARIATE ANALYSIS
 
 The multivariate analysis constituting the target variable(default status),count value and other variables:
"""

#gender
sns.countplot(x = df.Gender,  hue= df.Default_Status)

"""In each of the gender values, the Yes status is more than the no by almost half:"""

df.groupby(['Gender', 'Default_Status']) ['Default_Status'].count()

#married
sns.countplot(x = df.Married, hue = df.Default_Status)

"""In each of the Married values, the yes status is more than the no:"""

df.groupby(['Married', 'Default_Status']) ['Default_Status'].count()

#Dependents
sns.countplot(x = df.Dependents, hue = df.Default_Status)

"""There's a decreasing trend in the no status, similar to the overal number of entries in each dependent value.
This is different for the yes status where the value 2 has more entries than those in value 1.
"""

#Education
sns.countplot(x = df.Education, hue = df.Default_Status)

#Applicant income
sns.countplot(x = df.Self_Employed, hue = df.Default_Status)

#Credit history
sns.countplot(x = df.Credit_History, hue = df.Default_Status)

"""In all variables this is the only one with a value where the no status surpass the yes:
Most of the entries with a credit history of 0 have a default status of no. it's important to note that most entries with no credit history actually have a status of yes.
"""

#Property area
sns.countplot(x = df.Property_Area, hue = df.Default_Status)